// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tests/fixtures/test.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:test.UserClaims)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UserClaims {
    // message fields
    // @@protoc_insertion_point(field:test.UserClaims.user_id)
    pub user_id: i64,
    // @@protoc_insertion_point(field:test.UserClaims.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:test.UserClaims.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:test.UserClaims.roles)
    pub roles: ::std::vec::Vec<::protobuf::EnumOrUnknown<Role>>,
    // special fields
    // @@protoc_insertion_point(special_field:test.UserClaims.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserClaims {
    fn default() -> &'a UserClaims {
        <UserClaims as ::protobuf::Message>::default_instance()
    }
}

impl UserClaims {
    pub fn new() -> UserClaims {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &UserClaims| { &m.user_id },
            |m: &mut UserClaims| { &mut m.user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &UserClaims| { &m.username },
            |m: &mut UserClaims| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &UserClaims| { &m.email },
            |m: &mut UserClaims| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "roles",
            |m: &UserClaims| { &m.roles },
            |m: &mut UserClaims| { &mut m.roles },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserClaims>(
            "UserClaims",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserClaims {
    const NAME: &'static str = "UserClaims";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.user_id = is.read_int64()?;
                },
                18 => {
                    self.username = is.read_string()?;
                },
                26 => {
                    self.email = is.read_string()?;
                },
                32 => {
                    self.roles.push(is.read_enum_or_unknown()?);
                },
                34 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.roles)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.user_id);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.username);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        my_size += ::protobuf::rt::vec_packed_enum_or_unknown_size(4, &self.roles);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.user_id != 0 {
            os.write_int64(1, self.user_id)?;
        }
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        os.write_repeated_packed_enum_or_unknown(4, &self.roles)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserClaims {
        UserClaims::new()
    }

    fn clear(&mut self) {
        self.user_id = 0;
        self.username.clear();
        self.email.clear();
        self.roles.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserClaims {
        static instance: UserClaims = UserClaims {
            user_id: 0,
            username: ::std::string::String::new(),
            email: ::std::string::String::new(),
            roles: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UserClaims {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserClaims").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserClaims {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserClaims {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:test.Simple)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Simple {
    // message fields
    // @@protoc_insertion_point(field:test.Simple.some_claim)
    pub some_claim: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:test.Simple.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Simple {
    fn default() -> &'a Simple {
        <Simple as ::protobuf::Message>::default_instance()
    }
}

impl Simple {
    pub fn new() -> Simple {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "some_claim",
            |m: &Simple| { &m.some_claim },
            |m: &mut Simple| { &mut m.some_claim },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Simple>(
            "Simple",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Simple {
    const NAME: &'static str = "Simple";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.some_claim = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.some_claim.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.some_claim);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.some_claim.is_empty() {
            os.write_string(2, &self.some_claim)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Simple {
        Simple::new()
    }

    fn clear(&mut self) {
        self.some_claim.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Simple {
        static instance: Simple = Simple {
            some_claim: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Simple {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Simple").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Simple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Simple {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:test.Complex)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Complex {
    // message fields
    // @@protoc_insertion_point(field:test.Complex.user_id)
    pub user_id: i64,
    // @@protoc_insertion_point(field:test.Complex.nested)
    pub nested: ::protobuf::MessageField<Nested>,
    // @@protoc_insertion_point(field:test.Complex.user_name)
    pub user_name: ::std::string::String,
    // @@protoc_insertion_point(field:test.Complex.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:test.Complex.roles)
    pub roles: ::std::vec::Vec<::protobuf::EnumOrUnknown<Role>>,
    // special fields
    // @@protoc_insertion_point(special_field:test.Complex.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Complex {
    fn default() -> &'a Complex {
        <Complex as ::protobuf::Message>::default_instance()
    }
}

impl Complex {
    pub fn new() -> Complex {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &Complex| { &m.user_id },
            |m: &mut Complex| { &mut m.user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Nested>(
            "nested",
            |m: &Complex| { &m.nested },
            |m: &mut Complex| { &mut m.nested },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_name",
            |m: &Complex| { &m.user_name },
            |m: &mut Complex| { &mut m.user_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &Complex| { &m.email },
            |m: &mut Complex| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "roles",
            |m: &Complex| { &m.roles },
            |m: &mut Complex| { &mut m.roles },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Complex>(
            "Complex",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Complex {
    const NAME: &'static str = "Complex";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.user_id = is.read_int64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.nested)?;
                },
                26 => {
                    self.user_name = is.read_string()?;
                },
                34 => {
                    self.email = is.read_string()?;
                },
                40 => {
                    self.roles.push(is.read_enum_or_unknown()?);
                },
                42 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.roles)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.user_id);
        }
        if let Some(v) = self.nested.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.user_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.user_name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.email);
        }
        my_size += ::protobuf::rt::vec_packed_enum_or_unknown_size(5, &self.roles);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.user_id != 0 {
            os.write_int64(1, self.user_id)?;
        }
        if let Some(v) = self.nested.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.user_name.is_empty() {
            os.write_string(3, &self.user_name)?;
        }
        if !self.email.is_empty() {
            os.write_string(4, &self.email)?;
        }
        os.write_repeated_packed_enum_or_unknown(5, &self.roles)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Complex {
        Complex::new()
    }

    fn clear(&mut self) {
        self.user_id = 0;
        self.nested.clear();
        self.user_name.clear();
        self.email.clear();
        self.roles.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Complex {
        static instance: Complex = Complex {
            user_id: 0,
            nested: ::protobuf::MessageField::none(),
            user_name: ::std::string::String::new(),
            email: ::std::string::String::new(),
            roles: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Complex {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Complex").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Complex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Complex {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:test.Nested)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Nested {
    // message fields
    // @@protoc_insertion_point(field:test.Nested.team_id)
    pub team_id: i64,
    // @@protoc_insertion_point(field:test.Nested.team_name)
    pub team_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:test.Nested.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Nested {
    fn default() -> &'a Nested {
        <Nested as ::protobuf::Message>::default_instance()
    }
}

impl Nested {
    pub fn new() -> Nested {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "team_id",
            |m: &Nested| { &m.team_id },
            |m: &mut Nested| { &mut m.team_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "team_name",
            |m: &Nested| { &m.team_name },
            |m: &mut Nested| { &mut m.team_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Nested>(
            "Nested",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Nested {
    const NAME: &'static str = "Nested";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.team_id = is.read_int64()?;
                },
                18 => {
                    self.team_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.team_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.team_id);
        }
        if !self.team_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.team_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.team_id != 0 {
            os.write_int64(1, self.team_id)?;
        }
        if !self.team_name.is_empty() {
            os.write_string(2, &self.team_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Nested {
        Nested::new()
    }

    fn clear(&mut self) {
        self.team_id = 0;
        self.team_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Nested {
        static instance: Nested = Nested {
            team_id: 0,
            team_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Nested {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Nested").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Nested {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Nested {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:test.Role)
pub enum Role {
    // @@protoc_insertion_point(enum_value:test.Role.ReadFeatureFoo)
    ReadFeatureFoo = 0,
    // @@protoc_insertion_point(enum_value:test.Role.WriteFeatureFoo)
    WriteFeatureFoo = 1,
    // @@protoc_insertion_point(enum_value:test.Role.ReadFeatureBar)
    ReadFeatureBar = 2,
    // @@protoc_insertion_point(enum_value:test.Role.WriteFeatureBar)
    WriteFeatureBar = 3,
}

impl ::protobuf::Enum for Role {
    const NAME: &'static str = "Role";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Role> {
        match value {
            0 => ::std::option::Option::Some(Role::ReadFeatureFoo),
            1 => ::std::option::Option::Some(Role::WriteFeatureFoo),
            2 => ::std::option::Option::Some(Role::ReadFeatureBar),
            3 => ::std::option::Option::Some(Role::WriteFeatureBar),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Role> {
        match str {
            "ReadFeatureFoo" => ::std::option::Option::Some(Role::ReadFeatureFoo),
            "WriteFeatureFoo" => ::std::option::Option::Some(Role::WriteFeatureFoo),
            "ReadFeatureBar" => ::std::option::Option::Some(Role::ReadFeatureBar),
            "WriteFeatureBar" => ::std::option::Option::Some(Role::WriteFeatureBar),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Role] = &[
        Role::ReadFeatureFoo,
        Role::WriteFeatureFoo,
        Role::ReadFeatureBar,
        Role::WriteFeatureBar,
    ];
}

impl ::protobuf::EnumFull for Role {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Role").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Role {
    fn default() -> Self {
        Role::ReadFeatureFoo
    }
}

impl Role {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Role>("Role")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19tests/fixtures/test.proto\x12\x04test\"y\n\nUserClaims\x12\x17\n\
    \x07user_id\x18\x01\x20\x01(\x03R\x06userId\x12\x1a\n\x08username\x18\
    \x02\x20\x01(\tR\x08username\x12\x14\n\x05email\x18\x03\x20\x01(\tR\x05e\
    mail\x12\x20\n\x05roles\x18\x04\x20\x03(\x0e2\n.test.RoleR\x05roles\"'\n\
    \x06Simple\x12\x1d\n\nsome_claim\x18\x02\x20\x01(\tR\tsomeClaim\"\x9d\
    \x01\n\x07Complex\x12\x17\n\x07user_id\x18\x01\x20\x01(\x03R\x06userId\
    \x12$\n\x06nested\x18\x02\x20\x01(\x0b2\x0c.test.NestedR\x06nested\x12\
    \x1b\n\tuser_name\x18\x03\x20\x01(\tR\x08userName\x12\x14\n\x05email\x18\
    \x04\x20\x01(\tR\x05email\x12\x20\n\x05roles\x18\x05\x20\x03(\x0e2\n.tes\
    t.RoleR\x05roles\">\n\x06Nested\x12\x17\n\x07team_id\x18\x01\x20\x01(\
    \x03R\x06teamId\x12\x1b\n\tteam_name\x18\x02\x20\x01(\tR\x08teamName*X\n\
    \x04Role\x12\x12\n\x0eReadFeatureFoo\x10\0\x12\x13\n\x0fWriteFeatureFoo\
    \x10\x01\x12\x12\n\x0eReadFeatureBar\x10\x02\x12\x13\n\x0fWriteFeatureBa\
    r\x10\x03b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(UserClaims::generated_message_descriptor_data());
            messages.push(Simple::generated_message_descriptor_data());
            messages.push(Complex::generated_message_descriptor_data());
            messages.push(Nested::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Role::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
